package repositories;

import domain.Person;
import mappers.PersonMapper;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by lukaszgodlewski on 02.04.2017.
 */

public class PersonRepository extends RepositoryBase {
    protected PreparedStatement exists;
    protected PreparedStatement premium;
    protected PreparedStatement admin;
    protected PreparedStatement delpremium;

    public PersonRepository(Connection connection) throws SQLException {
        super(connection);
        exists = connection.prepareStatement(existsSql());
        premium = connection.prepareStatement(premiumSql());
        admin = connection.prepareStatement(adminSql());
        delpremium = connection.prepareStatement(delPremiumSql());
    }

    public void delete(Person p) {
        try {
            delete.setString(1, p.getUsername());
            delete.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void setPremium(String username) {
        try {
            premium.setString(1, username);
            premium.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void delPremium(String username){
        try{
            delpremium.setString(1, username);
            delpremium.executeUpdate();
        } catch (SQLException ex){
            ex.printStackTrace();
        }
    }

    public void setAdmin(String username) {
        try {
            admin.setString(1, username);
            admin.executeUpdate();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void add(Person p) {
        try {
            setInsertQuery(p);
            insert.execute();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public List<Person> all() {
        List<Person> persons = new ArrayList<Person>();

        try {
            ResultSet rs = list.executeQuery();

            while (rs.next()) {
                Person p = PersonMapper.map(rs);
                persons.add(p);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return persons;
    }

    public Person get(String username) {

        try {
            get.setString(1, username);
            ResultSet rs = get.executeQuery();
            rs.next();
            return PersonMapper.map(rs);

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public Boolean exists(String username){
        try {
            exists.setString(1, username);
            ResultSet rs = exists.executeQuery();
            rs.next();
            return rs.getInt("c1") != 0;
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public void setInsertQuery(Person p) throws SQLException {
        insert.setString(1, p.getUsername());
        insert.setString(2, p.getPassword());
        insert.setString(3, p.getEmail());
    }

    @Override
    protected String tableName() {
        return "person";
    }

    @Override
    protected String createTableSql() {
        return "CREATE TABLE person(" +
                "id bigint GENERATED BY DEFAULT AS IDENTITY," +
                "username VARCHAR(50)," +
                "password VARCHAR(50)," +
                "email VARCHAR(80)," +
                "is_admin BOOLEAN DEFAULT FALSE," +
                "is_premium BOOLEAN DEFAULT FALSE" +
                ")";
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO person(username, password, email) VALUES (?,?,?)";
    }

    protected String deleteSql() {
        return "DELETE FROM " + tableName() + " WHERE username=?;";
    }

    protected String getSql() {
        return "SELECT * FROM " + tableName() + " WHERE username=?;";
    }

    protected String existsSql() {
        return "SELECT count(*) FROM " + tableName() + " WHERE username=?;";
    }

    protected String premiumSql() {
        return "UPDATE " + tableName() + " SET is_premium=1 WHERE username=?";
    }

    protected String delPremiumSql() {
        return "UPDATE " + tableName() + " SET is_premium=0 WHERE username=?";
    }

    protected String adminSql() {
        return "UPDATE " + tableName() + " SET is_admin=1 WHERE username=?";
    }
}
